# -*- coding: utf-8 -*-
"""Copy of MinorProjectCodeFinal2023.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BzPtJy-ZQkFnDUj-toG-Gt7a4lCJNwNT
"""

import pandas as pd
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df_norm = pd.read_csv("Norm.csv")
# replace missing values with mean of the column
df_norm_mv = df_norm.fillna(df_norm.mean())
df_norm_mv

df_mi = pd.read_csv("MI.csv")
# replace missing values with mean of the column
df_mi_mv = df_mi.fillna(df_mi.mean())
df_mi_mv

df_cd = pd.read_csv("CD.csv")
# replace missing values with mean of the column
df_cd_mv = df_cd.fillna(df_cd.mean())
df_cd_mv

df_sttc = pd.read_csv("STTC.csv")
# replace missing values with mean of the column
df_sttc_mv = df_sttc.fillna(df_sttc.mean())
df_sttc_mv

df_hyp = pd.read_csv("HYP.csv")
# replace missing values with mean of the column
df_hyp_mv = df_hyp.fillna(df_hyp.mean())
df_hyp_mv

df_all = pd.concat([df_norm_mv, df_mi_mv,df_cd_mv,df_sttc_mv,df_hyp_mv], axis=0)

df_all['label'] = df_all['label'].replace({1: 0, 2: 1, 3: 2, 4: 3, 5: 4})

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, y_train)
dt_pred = dt_model.predict(X_test)
cm = confusion_matrix(y_test, dt_pred)
labels = ['norm','mi','cd','sttc','hyp']
sns.heatmap(cm, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

cm = confusion_matrix(y_test, rf_pred)
labels = ['norm','mi','cd','sttc','hyp']
sns.heatmap(cm, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

X = df_all.drop('label', axis=1)
y = df_all['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
import xgboost as xgb
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix
xgb_model = xgb.XGBClassifier()
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)
cm = confusion_matrix(y_test, xgb_pred)
labels = ['norm','mi','cd','sttc','hyp']
sns.heatmap(cm, annot=True, fmt='d', xticklabels=labels, yticklabels=labels)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()



